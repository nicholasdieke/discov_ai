import { t as toPosixPath, a as assertPosixPath, c as convertPageFilePathToRoutePath, e as convertFilePathToResolverName, f as convertFilePathToResolverType } from './chunks/loader-utils.mjs';
import { posix } from 'path';
import { log } from 'blitz';
import { parseSync } from '@swc/core';

function getResolverConfig(content) {
  const resolverConfig = {
    httpMethod: "POST"
  };
  const resolver = parseSync(content, {
    syntax: "typescript",
    target: "es2020"
  });
  const exportDelaration = resolver.body.find((node) => {
    var _a;
    if (node.type === "ExportDeclaration") {
      if (node.declaration.type === "VariableDeclaration") {
        if (((_a = node.declaration.declarations[0]) == null ? void 0 : _a.id.type) === "Identifier") {
          if (node.declaration.declarations[0].id.value === "config") {
            return true;
          }
        }
      }
    }
    return false;
  });
  if (exportDelaration && exportDelaration.type == "ExportDeclaration") {
    const declaration = exportDelaration.declaration;
    if (declaration && declaration.type == "VariableDeclaration") {
      const declarator = declaration.declarations[0];
      if (declarator && declarator.type == "VariableDeclarator") {
        const variable = declarator.init;
        if (variable && variable.type == "ObjectExpression") {
          const properties = variable.properties;
          if (properties) {
            const httpMethodProperty = properties.find((property) => {
              if (property.type == "KeyValueProperty") {
                if (property.key.type == "Identifier") {
                  return property.key.value == "httpMethod";
                }
              }
              return false;
            });
            if (httpMethodProperty && httpMethodProperty.type == "KeyValueProperty") {
              const value = httpMethodProperty.value;
              if (value && value.type == "StringLiteral") {
                resolverConfig.httpMethod = value.value;
              }
            }
          }
        }
      }
    }
  }
  return resolverConfig;
}

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
function loader(input) {
  return __async(this, null, function* () {
    const compiler = this._compiler;
    const id = this.resource;
    const root = this._compiler.context;
    const isSSR = compiler.name === "server";
    if (!isSSR) {
      return yield transformBlitzRpcResolverClient(
        input,
        toPosixPath(id),
        toPosixPath(root),
        this.query
      );
    }
    return input;
  });
}
module.exports = loader;
function transformBlitzRpcResolverClient(_src, id, root, options) {
  return __async(this, null, function* () {
    assertPosixPath(id);
    assertPosixPath(root);
    const resolverFilePath = "/" + posix.relative(root, id);
    assertPosixPath(resolverFilePath);
    const routePath = convertPageFilePathToRoutePath({
      appRoot: root,
      absoluteFilePath: resolverFilePath,
      resolverBasePath: options == null ? void 0 : options.resolverPath,
      extraRpcBasePaths: options == null ? void 0 : options.includeRPCFolders
    });
    const resolverName = convertFilePathToResolverName(resolverFilePath);
    const resolverType = convertFilePathToResolverType(resolverFilePath);
    const resolverConfig = {
      httpMethod: "POST"
    };
    if (resolverType === "query") {
      try {
        const { httpMethod } = getResolverConfig(_src);
        if (httpMethod) {
          resolverConfig.httpMethod = httpMethod;
        }
      } catch (e) {
        log.error(e);
      }
    }
    const code = `
    // @ts-nocheck
    import { __internal_buildRpcClient } from "@blitzjs/rpc";
    export default __internal_buildRpcClient({
      resolverName: "${resolverName}",
      resolverType: "${resolverType}",
      routePath: "${routePath}",
      httpMethod: "${resolverConfig.httpMethod}",
    });
  `;
    return code;
  });
}

export { loader, transformBlitzRpcResolverClient };
