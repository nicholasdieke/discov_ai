import { assert } from 'blitz';
import { win32, sep, posix, normalize, join } from 'path';

function assertPosixPath(path) {
  const errMsg = `Wrongly formatted path: ${path}`;
  assert(!path.includes(win32.sep), errMsg);
}
function toPosixPath(path) {
  if (process.platform !== "win32") {
    assert(sep === posix.sep, "TODO");
    assertPosixPath(path);
    return path;
  } else {
    assert(sep === win32.sep, "TODO");
    const pathPosix = path.split(win32.sep).join(posix.sep);
    assertPosixPath(pathPosix);
    return pathPosix;
  }
}
const topLevelFoldersThatMayContainResolvers = ["src", "app", "integrations"];
function buildPageExtensionRegex(pageExtensions) {
  return new RegExp(`(?<!\\.test|\\.spec)\\.(?:${pageExtensions.join("|")})$`);
}
const fileExtensionRegex = /\.([a-z]+)$/;
function convertPageFilePathToRoutePath({
  absoluteFilePath,
  resolverBasePath,
  appRoot,
  extraRpcBasePaths = []
}) {
  let path = normalize(absoluteFilePath);
  if (typeof resolverBasePath === "function") {
    path = resolverBasePath(path);
  } else if (resolverBasePath === "root") {
    path = path.replace(normalize(appRoot), "");
    for (const extraPath of extraRpcBasePaths) {
      path = path.replace(join(normalize(appRoot), extraPath.replace("/", sep), ".."), "");
    }
  } else {
    path = path.replace(/^.*?[\\/]queries[\\/]/, "/").replace(/^.*?[\\/]mutations[\\/]/, "/");
  }
  return path.replace(/\\/g, "/").replace(fileExtensionRegex, "");
}
function convertFilePathToResolverName(filePathFromAppRoot) {
  return filePathFromAppRoot.replace(/^.*[\\/](queries|mutations)[\\/]/, "").replace(fileExtensionRegex, "");
}
function convertFilePathToResolverType(filePathFromAppRoot) {
  return filePathFromAppRoot.match(/[\\/]queries[\\/]/) ? "query" : "mutation";
}
function getIsRpcFile(filePathFromAppRoot) {
  return /[\\/]queries[\\/]/.test(filePathFromAppRoot) || /[\\/]mutations[\\/]/.test(filePathFromAppRoot);
}

export { assertPosixPath as a, buildPageExtensionRegex as b, convertPageFilePathToRoutePath as c, topLevelFoldersThatMayContainResolvers as d, convertFilePathToResolverName as e, convertFilePathToResolverType as f, getIsRpcFile as g, toPosixPath as t };
