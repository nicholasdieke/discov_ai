import { t as toPosixPath, a as assertPosixPath, c as convertPageFilePathToRoutePath, e as convertFilePathToResolverName, f as convertFilePathToResolverType } from './chunks/loader-utils.mjs';
import { n as normalizeApiRoute } from './chunks/rpc.mjs';
import '@tanstack/react-query';
import 'blitz';
import 'next/router';
import { posix } from 'path';
import 'next/dist/client/normalize-trailing-slash';
import 'next/dist/client/add-base-path';
import 'superjson';

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
function loader(input) {
  return __async(this, null, function* () {
    const compiler = this._compiler;
    const id = this.resource;
    const root = this._compiler.context;
    const isSSR = compiler.name === "server";
    if (isSSR) {
      return yield transformBlitzRpcResolverServer(
        input,
        toPosixPath(id),
        toPosixPath(root),
        this.query
      );
    }
    return input;
  });
}
module.exports = loader;
function transformBlitzRpcResolverServer(src, id, root, options) {
  return __async(this, null, function* () {
    assertPosixPath(id);
    assertPosixPath(root);
    const resolverFilePath = "/" + posix.relative(root, id);
    assertPosixPath(resolverFilePath);
    const routePath = convertPageFilePathToRoutePath({
      appRoot: root,
      absoluteFilePath: resolverFilePath,
      resolverBasePath: options == null ? void 0 : options.resolverPath,
      extraRpcBasePaths: options == null ? void 0 : options.includeRPCFolders
    });
    const resolverName = convertFilePathToResolverName(resolverFilePath);
    const resolverType = convertFilePathToResolverType(resolverFilePath);
    const fullRoutePath = normalizeApiRoute("/api/rpc" + routePath);
    const lines = src.split("\n");
    const newLines = lines.map((line) => {
      if (line.trim().startsWith("export default")) {
        return line.replace("export default", "const __internal_rpcHandler =");
      }
      return line;
    });
    return `${newLines.join("\n")}

__internal_rpcHandler._resolverName = '${resolverName}'
__internal_rpcHandler._resolverType = '${resolverType}'
__internal_rpcHandler._routePath = '${fullRoutePath}'

export default __internal_rpcHandler`;
  });
}

export { loader, transformBlitzRpcResolverServer };
