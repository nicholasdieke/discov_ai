import * as prettier from 'prettier';
import Enquirer from 'enquirer';
import { EventEmitter } from 'events';
import { Editor } from 'mem-fs-editor';
import { Overrides } from 'recast/parsers/_babel_options';
import { Transform, TransformCallback } from 'stream';
import File from 'vinyl';

declare function getProjectRootSync(): string;
declare function getConfigSrcPath(): string;
declare const customTemplatesBlitzConfig: (isTypeScript: boolean, customTemplatesPath?: string, codemod?: boolean) => Promise<string | undefined>;
declare const customTsParser: {
    parse(source: string, options?: Overrides): any;
};
interface GeneratorOptions {
    context?: string;
    destinationRoot?: string;
    templateDir?: string;
    dryRun?: boolean;
    useTs?: boolean;
}
interface SourceRootType {
    type: "template" | "absolute";
    path: string;
}
/**
 * The base generator class.
 * Every generator must extend this class.
 */
declare abstract class Generator<T extends GeneratorOptions = GeneratorOptions> extends EventEmitter {
    protected readonly options: T;
    private readonly store;
    protected readonly fs: Editor;
    protected readonly enquirer: Enquirer;
    private performedActions;
    private useTs;
    private prettier;
    prettierDisabled: boolean;
    unsafe_disableConflictChecker: boolean;
    returnResults: boolean;
    /**
     * When `type: 'absolute'`, it's an absolute path
     * When `type: 'template'`, is the path type `templates/`.
     *
     * @example {type: 'absolue', path: './src/app'} => `./src/app`
     * @example {type: 'template', path: 'app'} => `templates/app`
     */
    abstract sourceRoot: SourceRootType;
    constructor(options: T);
    abstract getTemplateValues(): Promise<any>;
    abstract getTargetDirectory(): string;
    filesToIgnore(): string[];
    replaceConditionals(input: string, templateValues: any, prettierOptions?: prettier.Options): string;
    replaceTemplateValues(input: string, templateValues: any): string;
    process(input: Buffer, pathEnding: string, templateValues: any, prettierOptions: prettier.Options | undefined): string | Buffer;
    write(): Promise<void>;
    preCommit(): Promise<void>;
    postWrite(): Promise<void>;
    preventFileFromLogging(_path: string): boolean;
    sourcePath(...paths: string[]): string;
    destinationPath(...paths: string[]): string;
    run(): Promise<string | void>;
}

declare type TemplateConfig = {
    path: string;
    skipForms?: boolean;
    skipDatabase?: boolean;
};
interface AppGeneratorOptions extends GeneratorOptions {
    template: TemplateConfig;
    appName: string;
    useTs: boolean;
    yarn: boolean;
    pnpm?: boolean;
    version: string;
    skipInstall: boolean;
    skipGit: boolean;
    form: "finalform" | "hookform" | "formik";
    onPostInstall?: () => Promise<void>;
}
declare class AppGenerator extends Generator<AppGeneratorOptions> {
    sourceRoot: SourceRootType;
    prettierDisabled: boolean;
    packageInstallSuccess: boolean;
    filesToIgnore(): string[];
    getTemplateValues(): Promise<{
        name: string;
        safeNameSlug: string;
        username: string | undefined;
    }>;
    getTargetDirectory(): string;
    preCommit(): Promise<void>;
    postWrite(): Promise<void>;
    preventFileFromLogging(path: string): boolean;
    commitChanges(): void;
    private updateForms;
    private get pkgManager();
}

interface ModelGeneratorOptions extends GeneratorOptions {
    modelName: string;
    extraArgs: string[];
}
declare class ModelGenerator extends Generator<ModelGeneratorOptions> {
    sourceRoot: SourceRootType;
    constructor(options: ModelGeneratorOptions);
    static subdirectory: string;
    unsafe_disableConflictChecker: boolean;
    getTemplateValues(): Promise<void>;
    getTargetDirectory(): string;
    prismaMigratePrompt(): Promise<boolean>;
    write(): Promise<void>;
    postWrite(): Promise<void>;
}

interface MutationsGeneratorOptions extends GeneratorOptions {
    ModelName: string;
    ModelNames: string;
    modelName: string;
    modelNames: string;
    parentModel?: string;
    parentModels?: string;
    ParentModel?: string;
    ParentModels?: string;
}
declare class MutationsGenerator extends Generator<MutationsGeneratorOptions> {
    sourceRoot: SourceRootType;
    constructor(options: MutationsGeneratorOptions);
    static subdirectory: string;
    private getId;
    private getParam;
    getTemplateValues(): Promise<{
        parentModelId: string;
        parentModelParam: string;
        parentModel: string | undefined;
        parentModels: string | undefined;
        ParentModel: string | undefined;
        ParentModels: string | undefined;
        modelId: string;
        modelIdParam: string;
        modelName: string;
        modelNames: string;
        ModelName: string;
        ModelNames: string;
    }>;
    getTargetDirectory(): string;
}

interface MutationGeneratorOptions extends GeneratorOptions {
    name: string;
    Name: string;
}
declare class MutationGenerator extends Generator<MutationGeneratorOptions> {
    sourceRoot: SourceRootType;
    constructor(options: MutationGeneratorOptions);
    static subdirectory: string;
    getTemplateValues(): Promise<{
        name: string;
        Name: string;
    }>;
    getTargetDirectory(): string;
}

interface PageGeneratorOptions extends GeneratorOptions {
    ModelName: string;
    ModelNames: string;
    modelName: string;
    modelNames: string;
    parentModel?: string;
    parentModels?: string;
    ParentModel?: string;
    ParentModels?: string;
}
declare class PageGenerator extends Generator<PageGeneratorOptions> {
    sourceRoot: SourceRootType;
    constructor(options: PageGeneratorOptions);
    static subdirectory: string;
    private getId;
    private getParam;
    getTemplateValues(): Promise<{
        parentModelId: string;
        parentModelParam: string;
        parentModel: string | undefined;
        parentModels: string | undefined;
        ParentModel: string | undefined;
        ParentModels: string | undefined;
        modelId: string;
        modelIdParam: string;
        modelName: string;
        modelNames: string;
        ModelName: string;
        ModelNames: string;
        modelNamesPath: string;
    }>;
    getModelNamesPath(): string;
    getTargetDirectory(): string;
    postWrite(): Promise<void>;
}

interface QueriesGeneratorOptions extends GeneratorOptions {
    ModelName: string;
    ModelNames: string;
    modelName: string;
    modelNames: string;
    parentModel?: string;
    parentModels?: string;
    ParentModel?: string;
    ParentModels?: string;
}
declare class QueriesGenerator extends Generator<QueriesGeneratorOptions> {
    sourceRoot: SourceRootType;
    constructor(options: QueriesGeneratorOptions);
    static subdirectory: string;
    private getId;
    private getParam;
    getTemplateValues(): Promise<{
        parentModelId: string;
        parentModelParam: string;
        parentModel: string | undefined;
        parentModels: string | undefined;
        ParentModel: string | undefined;
        ParentModels: string | undefined;
        modelId: string;
        modelIdParam: string;
        modelName: string;
        modelNames: string;
        ModelName: string;
        ModelNames: string;
    }>;
    getTargetDirectory(): string;
}

interface QueryGeneratorOptions extends GeneratorOptions {
    name: string;
    Name: string;
}
declare class QueryGenerator extends Generator<QueryGeneratorOptions> {
    sourceRoot: SourceRootType;
    constructor(options: QueryGeneratorOptions);
    static subdirectory: string;
    getTemplateValues(): Promise<{
        name: string;
        Name: string;
    }>;
    getTargetDirectory(): string;
}

interface FormGeneratorOptions extends GeneratorOptions {
    ModelName: string;
    ModelNames: string;
    modelName: string;
    modelNames: string;
    parentModel?: string;
    parentModels?: string;
    ParentModel?: string;
    ParentModels?: string;
}
declare class FormGenerator extends Generator<FormGeneratorOptions> {
    sourceRoot: SourceRootType;
    constructor(options: FormGeneratorOptions);
    static subdirectory: string;
    private getId;
    private getParam;
    getTemplateValues(): Promise<{
        parentModelId: string;
        parentModelParam: string;
        parentModel: string | undefined;
        parentModels: string | undefined;
        ParentModel: string | undefined;
        ParentModels: string | undefined;
        modelId: string;
        modelIdParam: string;
        modelName: string;
        modelNames: string;
        ModelName: string;
        ModelNames: string;
    }>;
    getTargetDirectory(): string;
}

declare type PromptActions = "create" | "overwrite" | "skip" | "identical";
interface ConflictCheckerOptions {
    dryRun?: boolean;
}
declare class ConflictChecker extends Transform {
    private readonly options?;
    private _destroyed;
    constructor(options?: ConflictCheckerOptions | undefined);
    _transform(file: File, _encoding: string, cb: TransformCallback): void;
    destroy(err?: Error): this;
    handlePush(file: File, status: PromptActions): void;
    private checkDiff;
    private printDiff;
    private fileStatusString;
}

interface Fallbackable<T> {
    value: T;
    isFallback?: boolean;
}

declare const getLatestVersion: (dependency: string, templateVersion?: string) => Promise<Fallbackable<string>>;

declare type PackageInformation = any;
declare type NpmDepResponse = {
    versions: Record<string, PackageInformation>;
};
declare const fetchAllVersions: (dependency: string) => Promise<string[]>;
declare const fetchDistTags: (dependency: string) => Promise<Record<string, any>>;
declare const fetchLatestDistVersion: (dependency: string) => Promise<any>;

declare const getBlitzDependencyVersion: () => Promise<{
    value: any;
}>;

declare function capitalize(input: string): string;
declare function uncapitalize(input: string): string;
declare const singlePascal: (initial: any, ...args: any[]) => any;
declare const singleCamel: (initial: any, ...args: any[]) => any;
declare const pluralPascal: (initial: any, ...args: any[]) => any;
declare const pluralCamel: (initial: any, ...args: any[]) => any;

export { AppGenerator, AppGeneratorOptions, ConflictChecker, FormGenerator, FormGeneratorOptions, Generator, GeneratorOptions, ModelGenerator, ModelGeneratorOptions, MutationGenerator, MutationGeneratorOptions, MutationsGenerator, MutationsGeneratorOptions, NpmDepResponse, PageGenerator, PageGeneratorOptions, QueriesGenerator, QueriesGeneratorOptions, QueryGenerator, QueryGeneratorOptions, SourceRootType, capitalize, customTemplatesBlitzConfig, customTsParser, fetchAllVersions, fetchDistTags, fetchLatestDistVersion, getBlitzDependencyVersion, getConfigSrcPath, getLatestVersion, getProjectRootSync, pluralCamel, pluralPascal, singleCamel, singlePascal, uncapitalize };
