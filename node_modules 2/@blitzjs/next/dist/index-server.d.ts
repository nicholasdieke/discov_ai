import * as next_dist_shared_lib_image_config from 'next/dist/shared/lib/image-config';
import * as next_dist_lib_load_custom_routes from 'next/dist/lib/load-custom-routes';
import * as next_dist_server_config_shared from 'next/dist/server/config-shared';
import { NextApiResponse, NextApiRequest, GetServerSideProps, GetStaticProps, NextConfig } from 'next';
import { Ctx as Ctx$1, MiddlewareResponse, RouteUrlObject, AsyncFunc, FirstParam, BlitzServerPlugin, RequestMiddleware, BlitzLogger } from 'blitz';
import { ResolverPathOptions, InstallWebpackConfigOptions } from '@blitzjs/rpc';
import { DefaultOptions } from '@tanstack/react-query';
import { ParsedUrlQuery } from 'querystring';
import { PreviewData } from 'next/types';
export { AppProps, BlitzLayout, BlitzPage, BlitzProvider, BlitzProviderProps, ErrorBoundary, ErrorBoundaryProps, ErrorBoundaryPropsWithComponent, ErrorBoundaryPropsWithFallback, ErrorBoundaryPropsWithRender, ErrorComponent, ErrorFallbackProps, ErrorProps, NoPageFlicker, RouterContext, extractQueryFromAsPath, extractRouterParams, setupBlitzClient, useErrorHandler, useParam, useParams, useRouterQuery, withErrorBoundary } from './index-browser.js';
export { Routes } from '.blitz';
import 'react';
import 'url';
import 'next/dist/shared/lib/utils';
import 'next/router';

interface Ctx extends Ctx$1 {
}
interface BlitzNextApiResponse extends MiddlewareResponse, Omit<NextApiResponse, keyof MiddlewareResponse> {
}
declare type NextApiHandler<TResult> = (req: NextApiRequest, res: BlitzNextApiResponse) => TResult | void | Promise<TResult | void>;
declare type SetupBlitzOptions = {
    plugins: BlitzServerPlugin<RequestMiddleware, Ctx>[];
    onError?: (err: Error) => void;
    logger?: ReturnType<typeof BlitzLogger>;
};
declare type Redirect = {
    statusCode: 301 | 302 | 303 | 307 | 308;
    destination: string | RouteUrlObject;
    basePath?: false;
} | {
    permanent: boolean;
    destination: string | RouteUrlObject;
    basePath?: false;
};
declare type BlitzGSSPResult<P> = {
    props: P | Promise<P>;
} | {
    redirect: Redirect;
} | {
    notFound: true;
};
declare type BlitzGSPResult<P> = {
    props: P;
    revalidate?: number | boolean;
} | {
    redirect: Redirect;
    revalidate?: number | boolean;
} | {
    notFound: true;
    revalidate?: number | boolean;
};
declare type BlitzGSSPHandler<TProps extends {
    [key: string]: any;
} = {
    [key: string]: any;
}, Query extends ParsedUrlQuery = ParsedUrlQuery, PD extends PreviewData = PreviewData> = ({ ctx, req, res, ...args }: Parameters<GetServerSideProps<TProps, Query, PD>>[0] & {
    ctx: Ctx;
}) => Promise<BlitzGSSPResult<TProps>>;
declare type BlitzGSPHandler<TProps extends {
    [key: string]: any;
} = {
    [key: string]: any;
}, Query extends ParsedUrlQuery = ParsedUrlQuery, PD extends PreviewData = PreviewData> = ({ ctx, ...args }: Parameters<GetStaticProps<TProps, Query, PD>>[0] & {
    ctx: Ctx;
}) => Promise<BlitzGSPResult<TProps>> | BlitzGSPResult<TProps>;
declare type BlitzAPIHandler<TResult> = (req: NextApiRequest, res: BlitzNextApiResponse, ctx: Ctx) => TResult | void | Promise<TResult | void>;
declare const setupBlitzServer: ({ plugins, onError, logger }: SetupBlitzOptions) => {
    gSSP: <TProps extends {
        [key: string]: any;
    } = {
        [key: string]: any;
    }, Query extends ParsedUrlQuery = ParsedUrlQuery, PD extends PreviewData = PreviewData>(handler: BlitzGSSPHandler<TProps, Query, PD>) => GetServerSideProps<TProps, Query, PD>;
    gSP: <TProps_1 extends {
        [key: string]: any;
    } = {
        [key: string]: any;
    }, Query_1 extends ParsedUrlQuery = ParsedUrlQuery, PD_1 extends PreviewData = PreviewData>(handler: BlitzGSPHandler<TProps_1, Query_1, PD_1>) => GetStaticProps<TProps_1, Query_1, PD_1>;
    api: <TResult = void | Promise<void>>(handler: BlitzAPIHandler<TResult>) => NextApiHandler<void | TResult>;
};
interface BlitzConfig extends NextConfig {
    blitz?: {
        resolverPath?: ResolverPathOptions;
        includeRPCFolders?: string[];
        customServer?: {
            hotReload?: boolean;
        };
    };
}
declare function withBlitz(nextConfig?: BlitzConfig): {
    [x: string]: any;
    exportPathMap?: ((defaultMap: next_dist_server_config_shared.ExportPathMap, ctx: {
        dev: boolean;
        dir: string;
        outDir: string | null;
        distDir: string;
        buildId: string;
    }) => next_dist_server_config_shared.ExportPathMap | Promise<next_dist_server_config_shared.ExportPathMap>) | undefined;
    i18n?: next_dist_server_config_shared.I18NConfig | null | undefined;
    eslint?: next_dist_server_config_shared.ESLintConfig | undefined;
    typescript?: next_dist_server_config_shared.TypeScriptConfig | undefined;
    headers?: (() => Promise<next_dist_lib_load_custom_routes.Header[]>) | undefined;
    rewrites?: (() => Promise<next_dist_lib_load_custom_routes.Rewrite[] | {
        beforeFiles: next_dist_lib_load_custom_routes.Rewrite[];
        afterFiles: next_dist_lib_load_custom_routes.Rewrite[];
        fallback: next_dist_lib_load_custom_routes.Rewrite[];
    }>) | undefined;
    redirects?: (() => Promise<next_dist_lib_load_custom_routes.Redirect[]>) | undefined;
    webpack5?: false | undefined;
    excludeDefaultMomentLocales?: boolean | undefined;
    webpack: next_dist_server_config_shared.NextJsWebpackConfig & ((config: InstallWebpackConfigOptions["webpackConfig"], options: any) => any);
    trailingSlash?: boolean | undefined;
    env?: Record<string, string> | undefined;
    distDir?: string | undefined;
    cleanDistDir?: boolean | undefined;
    assetPrefix?: string | undefined;
    useFileSystemPublicRoutes?: boolean | undefined;
    generateBuildId?: (() => string | Promise<string | null> | null) | undefined;
    generateEtags?: boolean | undefined;
    pageExtensions?: string[] | undefined;
    compress?: boolean | undefined;
    analyticsId?: string | undefined;
    poweredByHeader?: boolean | undefined;
    images?: Partial<next_dist_shared_lib_image_config.ImageConfigComplete> | undefined;
    devIndicators?: {
        buildActivity?: boolean | undefined;
        buildActivityPosition?: "bottom-right" | "bottom-left" | "top-right" | "top-left" | undefined;
    } | undefined;
    onDemandEntries?: {
        maxInactiveAge?: number | undefined;
        pagesBufferLength?: number | undefined;
    } | undefined;
    amp?: {
        canonicalBase?: string | undefined;
    } | undefined;
    basePath?: string | undefined;
    sassOptions?: {
        [key: string]: any;
    } | undefined;
    productionBrowserSourceMaps?: boolean | undefined;
    optimizeFonts?: boolean | undefined;
    reactStrictMode?: boolean | undefined;
    publicRuntimeConfig?: {
        [key: string]: any;
    } | undefined;
    serverRuntimeConfig?: {
        [key: string]: any;
    } | undefined;
    httpAgentOptions?: {
        keepAlive?: boolean | undefined;
    } | undefined;
    future?: {
        webpack5?: false | undefined;
    } | undefined;
    outputFileTracing?: boolean | undefined;
    staticPageGenerationTimeout?: number | undefined;
    crossOrigin?: false | "anonymous" | "use-credentials" | undefined;
    swcMinify?: boolean | undefined;
    compiler?: {
        reactRemoveProperties?: boolean | {
            properties?: string[] | undefined;
        } | undefined;
        relay?: {
            src: string;
            artifactDirectory?: string | undefined;
            language?: "typescript" | "flow" | undefined;
        } | undefined;
        removeConsole?: boolean | {
            exclude?: string[] | undefined;
        } | undefined;
        styledComponents?: boolean | {
            displayName?: boolean | undefined;
            topLevelImportPaths?: string[] | undefined;
            ssr?: boolean | undefined;
            fileName?: boolean | undefined;
            meaninglessFileNames?: string[] | undefined;
            minify?: boolean | undefined;
            transpileTemplateLiterals?: boolean | undefined;
            namespace?: string | undefined;
            pure?: boolean | undefined;
            cssProp?: boolean | undefined;
        } | undefined;
        emotion?: boolean | {
            sourceMap?: boolean | undefined;
            autoLabel?: "dev-only" | "always" | "never" | undefined;
            labelFormat?: string | undefined;
        } | undefined;
    } | undefined;
    output?: "standalone" | undefined;
    experimental?: next_dist_server_config_shared.ExperimentalConfig | undefined;
};
declare type PrefetchQueryFn = <T extends AsyncFunc, TInput = FirstParam<T>>(resolver: T, params: TInput, options?: DefaultOptions) => Promise<void>;
declare module "blitz" {
    interface Ctx {
        prefetchQuery: PrefetchQueryFn;
        prefetchInfiniteQuery: PrefetchQueryFn;
    }
}

export { BlitzAPIHandler, BlitzConfig, BlitzGSPHandler, BlitzGSPResult, BlitzGSSPHandler, BlitzGSSPResult, BlitzNextApiResponse, Ctx, NextApiHandler, PrefetchQueryFn, Redirect, setupBlitzServer, withBlitz };
