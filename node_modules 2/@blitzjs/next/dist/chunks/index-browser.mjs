import { RedirectError, reduceBlitzPlugins } from 'blitz';
import Head from 'next/head';
import * as React from 'react';
import React__default from 'react';
import { QueryClientProvider, Hydrate } from '@tanstack/react-query';
import hoistNonReactStatics from 'hoist-non-react-statics';
import SuperJSON from 'superjson';
import { useRouter } from 'next/router';
import _debug from 'debug';
import '.blitz';

var __defProp$2 = Object.defineProperty;
var __defProps$1 = Object.defineProperties;
var __getOwnPropDescs$1 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$2 = Object.getOwnPropertySymbols;
var __hasOwnProp$2 = Object.prototype.hasOwnProperty;
var __propIsEnum$2 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$2 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$2.call(b, prop))
      __defNormalProp$2(a, prop, b[prop]);
  if (__getOwnPropSymbols$2)
    for (var prop of __getOwnPropSymbols$2(b)) {
      if (__propIsEnum$2.call(b, prop))
        __defNormalProp$2(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps$1 = (a, b) => __defProps$1(a, __getOwnPropDescs$1(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$2.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$2)
    for (var prop of __getOwnPropSymbols$2(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$2.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function withSuperJsonProps(result, exclude = []) {
  if (!("props" in result)) {
    return result;
  }
  if (!result.props) {
    return result;
  }
  const excludedPropValues = exclude.map((propKey) => {
    const value = result.props[propKey];
    delete result.props[propKey];
    return value;
  });
  const { json, meta } = SuperJSON.serialize(result.props);
  const props = json;
  if (meta) {
    props._superjson = meta;
  }
  exclude.forEach((key, index) => {
    const excludedPropValue = excludedPropValues[index];
    if (typeof excludedPropValue !== "undefined") {
      props[key] = excludedPropValue;
    }
  });
  return __spreadProps$1(__spreadValues$2({}, result), {
    props
  });
}
function deserializeProps(serializedProps) {
  const _a = serializedProps, { _superjson } = _a, props = __objRest(_a, ["_superjson"]);
  return SuperJSON.deserialize({ json: props, meta: _superjson });
}
function withSuperJSONPage(Page) {
  function WithSuperJSON(serializedProps) {
    return /* @__PURE__ */ React.createElement(Page, __spreadValues$2({}, deserializeProps(serializedProps)));
  }
  hoistNonReactStatics(WithSuperJSON, Page);
  return WithSuperJSON;
}

const RouterContext = React__default.createContext(null);
if (process.env.NODE_ENV !== "production") {
  RouterContext.displayName = "RouterContext";
}

var __defProp$1 = Object.defineProperty;
var __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;
var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
var __propIsEnum$1 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$1 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$1.call(b, prop))
      __defNormalProp$1(a, prop, b[prop]);
  if (__getOwnPropSymbols$1)
    for (var prop of __getOwnPropSymbols$1(b)) {
      if (__propIsEnum$1.call(b, prop))
        __defNormalProp$1(a, prop, b[prop]);
    }
  return a;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
const debug = _debug("blitz:errorboundary");
const changedArray = (a = [], b = []) => a.length !== b.length || a.some((item, index) => !Object.is(item, b[index]));
const initialState = { error: null };
class ErrorBoundary extends React.Component {
  constructor() {
    super(...arguments);
    this.state = initialState;
    this.updatedWithError = false;
    this.resetErrorBoundary = (...args) => {
      var _a, _b;
      (_b = (_a = this.props).onReset) == null ? void 0 : _b.call(_a, ...args);
      this.reset();
    };
    this.handleRouteChange = () => {
      var _a, _b;
      debug("Resetting error boundary on route change");
      (_b = (_a = this.props).onReset) == null ? void 0 : _b.call(_a);
      this.reset();
    };
  }
  static getDerivedStateFromError(error) {
    return { error };
  }
  reset() {
    this.updatedWithError = false;
    this.setState(initialState);
  }
  componentDidCatch(error, info) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      if (error instanceof RedirectError) {
        debug("Redirecting from ErrorBoundary to", error.url);
        yield (_a = this.context) == null ? void 0 : _a.push(error.url);
        return;
      }
      (_c = (_b = this.props).onError) == null ? void 0 : _c.call(_b, error, info);
    });
  }
  componentDidMount() {
    var _a, _b;
    const { error } = this.state;
    if (error !== null) {
      this.updatedWithError = true;
    }
    (_b = (_a = this.context) == null ? void 0 : _a.events) == null ? void 0 : _b.on("routeChangeComplete", this.handleRouteChange);
  }
  componentWillUnmount() {
    var _a, _b;
    (_b = (_a = this.context) == null ? void 0 : _a.events) == null ? void 0 : _b.off("routeChangeComplete", this.handleRouteChange);
  }
  componentDidUpdate(prevProps) {
    var _a, _b;
    const { error } = this.state;
    const { resetKeys } = this.props;
    if (error !== null && !this.updatedWithError) {
      this.updatedWithError = true;
      return;
    }
    if (error !== null && changedArray(prevProps.resetKeys, resetKeys)) {
      (_b = (_a = this.props).onResetKeysChange) == null ? void 0 : _b.call(_a, prevProps.resetKeys, resetKeys);
      this.reset();
    }
  }
  render() {
    const { error } = this.state;
    const { fallbackRender, FallbackComponent, fallback } = this.props;
    if (error !== null) {
      const props = {
        error,
        resetErrorBoundary: this.resetErrorBoundary
      };
      if (error instanceof RedirectError) {
        return null;
      } else if (React.isValidElement(fallback)) {
        return fallback;
      } else if (typeof fallbackRender === "function") {
        return fallbackRender(props);
      } else if (FallbackComponent) {
        return /* @__PURE__ */ React.createElement(FallbackComponent, __spreadValues$1({}, props));
      } else {
        throw new Error(
          "<ErrorBoundary> requires either a fallback, fallbackRender, or FallbackComponent prop"
        );
      }
    }
    return this.props.children;
  }
}
ErrorBoundary.contextType = RouterContext;
function withErrorBoundary(Component, errorBoundaryProps) {
  const Wrapped = (props) => {
    return /* @__PURE__ */ React.createElement(ErrorBoundary, __spreadValues$1({}, errorBoundaryProps), /* @__PURE__ */ React.createElement(Component, __spreadValues$1({}, props)));
  };
  const name = Component.displayName || Component.name || "Unknown";
  Wrapped.displayName = `withErrorBoundary(${name})`;
  return Wrapped;
}
function useErrorHandler(givenError) {
  const [error, setError] = React.useState(null);
  if (givenError != null)
    throw givenError;
  if (error != null)
    throw error;
  return setError;
}

const statusCodes = {
  400: "Bad Request",
  404: "This page could not be found",
  405: "Method Not Allowed",
  500: "Internal Server Error"
};
function _getInitialProps({ res, err }) {
  const statusCode = res && res.statusCode ? res.statusCode : err ? err.statusCode : 404;
  return { statusCode };
}
class ErrorComponent extends React__default.Component {
  render() {
    const { statusCode } = this.props;
    const title = this.props.title || statusCodes[statusCode] || "An unexpected error has occurred";
    return /* @__PURE__ */ React__default.createElement("div", {
      style: styles.error
    }, /* @__PURE__ */ React__default.createElement(Head, null, /* @__PURE__ */ React__default.createElement("title", null, statusCode ? `${statusCode}: ${title}` : "Application error: a client-side exception has occurred")), /* @__PURE__ */ React__default.createElement("div", null, /* @__PURE__ */ React__default.createElement("style", {
      dangerouslySetInnerHTML: { __html: "body { margin: 0 }" }
    }), statusCode ? /* @__PURE__ */ React__default.createElement("h1", {
      style: styles.h1
    }, statusCode) : null, /* @__PURE__ */ React__default.createElement("div", {
      style: styles.desc
    }, /* @__PURE__ */ React__default.createElement("h2", {
      style: styles.h2
    }, this.props.title || statusCode ? title : /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, "Application error: a client-side exception has occurred (see the browser console for more information)"), "."))));
  }
}
ErrorComponent.displayName = "ErrorPage";
ErrorComponent.getInitialProps = _getInitialProps;
ErrorComponent.origGetInitialProps = _getInitialProps;
const styles = {
  error: {
    color: "#000",
    background: "#fff",
    fontFamily: '-apple-system, BlinkMacSystemFont, Roboto, "Segoe UI", "Fira Sans", Avenir, "Helvetica Neue", "Lucida Grande", sans-serif',
    height: "100vh",
    textAlign: "center",
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center"
  },
  desc: {
    display: "inline-block",
    textAlign: "left",
    lineHeight: "49px",
    height: "49px",
    verticalAlign: "middle"
  },
  h1: {
    display: "inline-block",
    borderRight: "1px solid rgba(0, 0, 0,.3)",
    margin: 0,
    marginRight: "20px",
    padding: "10px 23px 10px 0",
    fontSize: "24px",
    fontWeight: 500,
    verticalAlign: "top"
  },
  h2: {
    fontSize: "14px",
    fontWeight: "normal",
    lineHeight: "inherit",
    margin: 0,
    padding: 0
  }
};

const decodeString = (str) => decodeURIComponent(str.replace(/\+/g, "%20"));
function decode(str) {
  if (!str)
    return {};
  let out = {};
  for (const current of str.split("&")) {
    let [key, value = ""] = current.split("=");
    key = decodeString(key);
    value = decodeString(value);
    if (key.length === 0)
      continue;
    if (key in out) {
      out[key] = [].concat(out[key], value);
    } else {
      out[key] = value;
    }
  }
  return out;
}
function extractQueryFromAsPath(asPath) {
  return decode(asPath.split("?", 2)[1]);
}
function useRouterQuery() {
  const router = useRouter();
  const query = React__default.useMemo(() => extractQueryFromAsPath(router.asPath), [router.asPath]);
  return query;
}
function areQueryValuesEqual(value1, value2) {
  if (typeof value1 !== typeof value2) {
    return false;
  }
  if (Array.isArray(value1) && Array.isArray(value2)) {
    if (value1.length !== value2.length) {
      return false;
    }
    for (let i = 0; i < value1.length; i++) {
      if (value1[i] !== value2[i]) {
        return false;
      }
    }
    return true;
  }
  return value1 === value2;
}
function extractRouterParams(routerQuery, asPathQuery) {
  return Object.fromEntries(
    Object.entries(routerQuery).filter(
      ([key, value]) => typeof asPathQuery[key] === "undefined" || !areQueryValuesEqual(value, asPathQuery[key])
    )
  );
}
function useParams(returnType) {
  const router = useRouter();
  const query = useRouterQuery();
  const params = React__default.useMemo(() => {
    const rawParams = extractRouterParams(router.query, query);
    if (returnType === "string") {
      const parsedParams = {};
      for (const key in rawParams) {
        if (typeof rawParams[key] === "string") {
          parsedParams[key] = rawParams[key];
        }
      }
      return parsedParams;
    }
    if (returnType === "number") {
      const parsedParams = {};
      for (const key in rawParams) {
        if (rawParams[key]) {
          const num = Number(rawParams[key]);
          parsedParams[key] = isNaN(num) ? void 0 : num;
        }
      }
      return parsedParams;
    }
    if (returnType === "array") {
      const parsedParams = {};
      for (const key in rawParams) {
        const rawValue = rawParams[key];
        if (Array.isArray(rawParams[key])) {
          parsedParams[key] = rawValue;
        } else if (typeof rawValue === "string") {
          parsedParams[key] = [rawValue];
        }
      }
      return parsedParams;
    }
    return rawParams;
  }, [router.query, query, returnType]);
  return params;
}
function useParam(key, returnType) {
  const params = useParams(returnType);
  const value = params[key];
  return value;
}

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const buildWithBlitz = (withPlugins) => {
  return function withBlitzAppRoot(UserAppRoot) {
    const BlitzOuterRoot = (props) => {
      var _a;
      const component = React__default.useMemo(() => withPlugins(props.Component), [props.Component]);
      React__default.useEffect(() => {
        setTimeout(() => {
          document.documentElement.classList.add("blitz-first-render-complete");
        });
      }, []);
      return /* @__PURE__ */ React__default.createElement(BlitzProvider, {
        dehydratedState: (_a = props.pageProps) == null ? void 0 : _a.dehydratedState
      }, /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, props.Component.suppressFirstRenderFlicker && /* @__PURE__ */ React__default.createElement(NoPageFlicker, null), /* @__PURE__ */ React__default.createElement(UserAppRoot, __spreadProps(__spreadValues({}, props), {
        Component: component
      }))));
    };
    Object.assign(BlitzOuterRoot, UserAppRoot);
    return withSuperJSONPage(BlitzOuterRoot);
  };
};
const BlitzProvider = ({
  client = globalThis.queryClient,
  contextSharing = false,
  dehydratedState,
  hydrateOptions,
  children
}) => {
  const router = useRouter();
  if (client) {
    return /* @__PURE__ */ React__default.createElement(RouterContext.Provider, {
      value: router
    }, /* @__PURE__ */ React__default.createElement(QueryClientProvider, {
      client: client || globalThis.queryClient,
      contextSharing
    }, /* @__PURE__ */ React__default.createElement(Hydrate, {
      state: dehydratedState,
      options: hydrateOptions
    }, children)));
  }
  return /* @__PURE__ */ React__default.createElement(RouterContext.Provider, {
    value: router
  }, children);
};
const setupBlitzClient = ({
  plugins
}) => {
  const { exports, withPlugins } = reduceBlitzPlugins({ plugins });
  const withBlitz = buildWithBlitz(withPlugins);
  return __spreadValues({
    withBlitz
  }, exports);
};
const customCSS = `
  body::before {
    content: "";
    display: block;
    position: fixed;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    z-index: 99999;
    background-color: white;
  }

  .blitz-first-render-complete body::before {
    display: none;
  }
`;
const noscriptCSS = `
  body::before {
    content: none
  }
`;
const NoPageFlicker = () => {
  return /* @__PURE__ */ React__default.createElement(Head, null, /* @__PURE__ */ React__default.createElement("style", {
    dangerouslySetInnerHTML: { __html: customCSS }
  }), /* @__PURE__ */ React__default.createElement("noscript", null, /* @__PURE__ */ React__default.createElement("style", {
    dangerouslySetInnerHTML: { __html: noscriptCSS }
  })));
};

export { BlitzProvider as B, ErrorBoundary as E, NoPageFlicker as N, RouterContext as R, withErrorBoundary as a, ErrorComponent as b, useRouterQuery as c, extractRouterParams as d, extractQueryFromAsPath as e, useParams as f, useParam as g, setupBlitzClient as s, useErrorHandler as u, withSuperJsonProps as w };
